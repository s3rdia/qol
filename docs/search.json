[{"path":"https://s3rdia.github.io/qol/articles/SAS_compare.html","id":"the-concept-of-formats","dir":"Articles","previous_headings":"","what":"The Concept of Formats","title":"How Does qol Compare to SAS?","text":"Formats like molds stencils put data . SAS formats defined procedure Proc Formats, adapted discrete_format() interval_format(). can define, values transferred result categories. completely detached data working . great thing , one can label recode values, one can also define called multilabels. Meaning, one original value can transferred multiple result categories. cell data frame can hold one distinct value, normally good thing. let’s say want convert single ages age categories. age “3” example go category “6”, also “12”, “18” “total”. Normally compute additional variables, hold different categorizations, also double observations category. ways just bloat data frame cost additional memory, particularly work big data sets. format containers, just keep small reference original values result categories. Formats data find way together just computing results, meaning original data frame can passed function capable handling formats, without data transformation beforehand. just tell function format applied variable. ’s . function handles rest outputs desired categories. method memory efficient, readable user friendly creating larger complex outputs time. Let’s look formats created SAS: equivalent R now looks like : main difference input output values swapped, aside looks similar. recommend let format names end dot make stand . dot end SAS way assigning format variable.","code":"Proc Format;      Value Sex (Multilabel Notsorted)         1,2 = 'Total'           1 = 'Male'           2 = 'Female';                Value Age (Multilabel Notsorted)         00 - 99 = 'Total'         00 - 02 = 'under 3'         00 - 05 = 'under 6'         00 - 11 = 'under 12'         00 - 17 = 'under 18'         18 - 24 = '18 to under 25'         25 - 49 = '25 to under 50'         50 - 64 = '50 to under 65'         65 - 95 = '65 and older'         80 - 99 = '80 and older';  Run; sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)      age. <- discrete_format(     \"Total\"          = 0:99,     \"under 3\"        = 0:2,     \"under 6\"        = 0:5,     \"under 12\"       = 0:11,     \"under 18\"       = 0:17,     \"18 to under 25\" = 18:24,     \"25 to under 55\" = 25:54,     \"55 to under 65\" = 55:64,     \"65 and older\"   = 65:99,     \"80 and older\"   = 80:99)"},{"path":"https://s3rdia.github.io/qol/articles/SAS_compare.html","id":"a-more-powerful-summarise","dir":"Articles","previous_headings":"","what":"A More Powerful Summarise","title":"How Does qol Compare to SAS?","text":"summarise_plus() based SAS procedure Proc Summary, provides efficient readable ways perform complex aggregations. Normally compute new categorical variables beforehand - probably even different forms, wanted different categorizations - bloat data set. recoding footwork finally use multiple summaries compute stats need put back together. function necessary. summarise_plus() put original data frame let recoding happen via format containers. efficient, since new variables categories created just summarise happens. Additionally can specify whether want produce nested version group variables whether want produce every possible combination one go. single option. First let’s look SAS side: equivalent R : tried keep close possible original. functions , generate every possible combination class variables. Meaning: total year sex age year + sex year + age sex + age year + sex + age addition, using formats, function generates results original (labeled) values, also additional categories specified multilabels . make simple: put variable sex values 1 2 original data get results “Male”, “Female” “Total” (meaning 1 + 2). approach can keep original data original possible generate desired variables values summarisation. like combination year + sex + age, get summarisation function, can just change nesting “deepest”. SAS just add NWay end first line.","code":"Proc Summary Data = Work.My_Data;      Class Year;     Class Sex Age /Order = Data Mlf Preloadfmt Missing;      Var Weight;      Format Sex Sex. Age Age.;      Output Out  = Work.My_Data_Agg            Sum  =            Mean =;  Run; my_data_agg <- my_data |>     summarise_plus(class      = c(year, sex, age),                    values     = weight,                    statistics = c(\"sum\", \"mean\", \"freq\"),                    formats    = list(sex = sex.,                                      age = age.),                    nesting    = \"all\",                    na.rm      = TRUE)"},{"path":"https://s3rdia.github.io/qol/articles/SAS_compare.html","id":"a-more-powerful-tabulation","dir":"Articles","previous_headings":"","what":"A More Powerful Tabulation","title":"How Does qol Compare to SAS?","text":"any_table() based SAS procedure Proc Tabulate, provides efficient readable ways perform complex tabulations. function can combine number variables possible way, . Sounds crazy? crazy! just define variables variable combinations end table rows columns simple syntax. Listing variables vector like c(“var1”, “var2”, “var3”,…) means put variables (case row variables) besides (case column variables) . Nesting variables easy putting plus sign , e.g. c(“var1 + var2”, “var2” + “var3” + “var4”, etc.). course can combine versions. real highlight , function creates desired variable combinations exports Excel file, prints fully custom styled table workbook. Setting custom, reusable style easy setting options like: provide color table header, set font size row header, borders drawn table cells yes/, . Merging doubled header texts, happens automatically. function basically can fully concentrate designing table, instead thinking hard calculate put border even manually prepare designed workbook. , SAS way first: equivalent R : function way writing things goes bit apart, core mechanics, achieve result, stay . just simple example, can nest number variables, anywhere table. help formats can generate number additional categories without touching original data. doesn’t get complex see . Don’t believe ? , wanted produce table multiple times, every time filtered expression another variable? need write fancy loops, right? … right? Give second: code get Excel workbook 19 worksheets containing table different states. way: SAS can just easy.","code":"Proc Tabulate Data = Work.Armut;      Class Year;     Class Sex Age /Order = Data Mlf Preloadfmt;      Var Weight;      Table /* Rows */           Sex = ''           Sex = '' * Alter = '',            /* Columns */           Year = 'Percentage based on sex' * Weight = '' * PctSum<sex> = '%'           Year = 'Population (weighted)'   * Weight = '' * Sum = '1000'           Year = 'Unweighted'              * Weight = '' * N = 'Count'           /Box = 'Variable';      Format Sex Sex. Age Age.;  Run; my_data |> any_table(rows       = c(\"sex\", \"sex + age\"),                      columns    = \"year\",                      values     = weight,                      statistics = c(\"pct_group\", \"sum\", \"freq\"),                      pct_group  = \"sex\",                      formats    = list(sex = sex.,                                        age = age.),                      na.rm      = TRUE) # Let's try it with the single states of Germany, Germany as a whole and eastern and western states. state. <- discrete_format(     \"Germany\"                       = 1:16,     \"Schleswig-Holstein\"            = 1,     \"Hamburg\"                       = 2,     \"Lower Saxony\"                  = 3,     \"Bremen\"                        = 4,     \"North Rhine-Westphalia\"        = 5,     \"Hesse\"                         = 6,     \"Rhineland-Palatinate\"          = 7,     \"Baden-Württemberg\"             = 8,     \"Bavaria\"                       = 9,     \"Saarland\"                      = 10,     \"West\"                          = 1:10,     \"Berlin\"                        = 11,     \"Brandenburg\"                   = 12,     \"Mecklenburg-Western Pomerania\" = 13,     \"Saxony\"                        = 14,     \"Saxony-Anhalt\"                 = 15,     \"Thuringia\"                     = 16,     \"East\"                          = 11:16)  # Now produce the same table as above for every expression of the format above. See the difference? # There is nothing more to it. my_data |> any_table(rows       = c(\"sex\", \"sex + age\"),                      columns    = \"year\",                      by         = state,                      values     = weight,                      statistics = c(\"pct_group\", \"sum\", \"freq\"),                      pct_group  = \"sex\",                      formats    = list(sex   = sex.,                                        age   = age.,                                        state = state.),                      na.rm      = TRUE)"},{"path":"https://s3rdia.github.io/qol/articles/SAS_compare.html","id":"do-it-with-style","dir":"Articles","previous_headings":"","what":"Do It With Style","title":"How Does qol Compare to SAS?","text":"may nice good, don’t like style programmer gave tables? need different style? Change everything hand afterwards? , can just create style simple : said: doesn’t get complex. can add many things tables just easy. complex programming needed, just little bit imagination. examples see reference. now go create good looking tables!","code":"# Want a blue header color? Sure. my_style <- excel_output_style(header_back_color = \"0000FF\")  # But with red font color? No problem. my_style <- my_style |> modify_output_style(header_font_color = \"FF0000\")  # Another font and individual column width? Why not. my_style <- my_style |> modify_output_style(font         = \"Times New Roman\",                                             column_width = c(20, 12, 15, 9))  # Change the font size for the titles and remove borders around the row header? Absolutely. my_style <- my_style |> modify_output_style(title_font_size = 20,                                             cat_col_borders = FALSE)                                              # Now let's integrate this new style my_data |> any_table(rows       = c(\"sex\", \"sex + age\"),                      columns    = \"year\",                      by         = state,                      values     = weight,                      statistics = c(\"pct_group\", \"sum\", \"freq\"),                      pct_group  = \"sex\",                      formats    = list(sex   = sex.,                                        age   = age.,                                        state = state.),                      style      = my_style,                      na.rm      = TRUE)                       # Done."},{"path":"https://s3rdia.github.io/qol/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tim Siebenmorgen. Author, maintainer, copyright holder.","code":""},{"path":"https://s3rdia.github.io/qol/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Siebenmorgen T (2025). qol: Powerful 'SAS' Inspired Concepts Efficient Bigger Outputs. R package version 1.0.2, https://github.com/s3rdia/qol.","code":"@Manual{,   title = {qol: Powerful 'SAS' Inspired Concepts for more Efficient Bigger Outputs},   author = {Tim Siebenmorgen},   year = {2025},   note = {R package version 1.0.2},   url = {https://github.com/s3rdia/qol}, }"},{"path":"https://s3rdia.github.io/qol/index.html","id":"qol---quality-of-life-","dir":"","previous_headings":"","what":"Powerful SAS Inspired Concepts for more Efficient Bigger Outputs","title":"Powerful SAS Inspired Concepts for more Efficient Bigger Outputs","text":"Bringing Powerful ‘SAS’ Inspired Concepts Efficient Bigger Outputs ‘R’. main goal make descriptive evaluations easier create bigger complex outputs less time less code. Introducing format containers multilabels, powerful summarise capable output every possible combination provided grouping variables one go, tabulation functions can create table different styles readable functions. code optimized work fast even datasets million observations.","code":""},{"path":"https://s3rdia.github.io/qol/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Powerful SAS Inspired Concepts for more Efficient Bigger Outputs","text":"","code":"# Official release install.packages(\"qol\")  # Development version devtools::install_github(\"s3rdia/qol\") pak::pak(\"s3rdia/qol\")"},{"path":"https://s3rdia.github.io/qol/index.html","id":"format-containers","dir":"","previous_headings":"","what":"Format Containers","title":"Powerful SAS Inspired Concepts for more Efficient Bigger Outputs","text":"Create format container independent data frame. Define values recoded new categories, format applied variable data frame. possible assign single value multiple new categories create multilabel. format containers, just keep small reference original values result categories. Formats data find way together just computing results. method memory efficient, readable user friendly creating larger complex outputs time.","code":"library(qol)  # Creating format containers age. <- discrete_format(     \"Total\"          = 0:100,     \"under 18\"       = 0:17,     \"18 to under 25\" = 18:24,     \"25 to under 55\" = 25:54,     \"55 to under 65\" = 55:64,     \"65 and older\"   = 65:100)  sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)"},{"path":"https://s3rdia.github.io/qol/index.html","id":"massive-outputs-simple-and-fast","dir":"","previous_headings":"","what":"Massive Outputs: Simple and fast","title":"Powerful SAS Inspired Concepts for more Efficient Bigger Outputs","text":"package builds incredibly fast collapse data.table packages. addition code optimized handle big datasets efficiently format concept.  operations based summarisation fastest. operations take bit longer still work fast big datasets.","code":"library(qol)  # If you want to test the raw speed in combination with creating big outputs try this: # Lets crank up the observations to 10 Millions my_data <- dummy_data(10000000)  # Create format containers age. <- discrete_format(     \"Total\"          = 0:100,     \"under 18\"       = 0:17,     \"18 to under 25\" = 18:24,     \"25 to under 55\" = 25:54,     \"55 to under 65\" = 55:64,     \"65 and older\"   = 65:100)  sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  education. <- discrete_format(     \"Total\"            = c(\"low\", \"middle\", \"high\"),     \"low education\"    = \"low\",     \"middle education\" = \"middle\",     \"high education\"   = \"high\")      # And now let's take a second and see what massive outputs we can get in no time summary_df <- my_data |>     summarise_plus(class      = c(year, sex, age, education),                    values     = c(income, probability, weight),                    statistics = c(\"freq\", \"sum\", \"sum_wgt\", \"pct_group\", \"pct_total\", \"missing\"),                    formats    = list(age = age.,                                      sex = sex.,                                      education = education.),                    weight     = \"weight\",                    nesting    = \"all\",                    notes      = FALSE)"},{"path":"https://s3rdia.github.io/qol/index.html","id":"powerful-tabulation","dir":"","previous_headings":"","what":"Powerful tabulation","title":"Powerful SAS Inspired Concepts for more Efficient Bigger Outputs","text":"Using wonderful openxlsx2 package maximum style, can basically output table fully styled little effort. Combine number variables possible way, . Setting custom, reusable style easy setting options like: provide color table header, set font size row header, borders drawn table cells yes/, . can fully concentrate designing table, instead thinking hard calculate put border even manually prepare designed workbook.  can also combine multiple tables one workbook, different sheet, save file, instead just viewing .","code":"library(qol)  my_data <- dummy_data(100000)  # Create format containers age. <- discrete_format(     \"Total\"          = 0:100,     \"under 18\"       = 0:17,     \"18 to under 25\" = 18:24,     \"25 to under 55\" = 25:54,     \"55 to under 65\" = 55:64,     \"65 and older\"   = 65:100)  sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  education. <- discrete_format(     \"Total\"            = c(\"low\", \"middle\", \"high\"),     \"low education\"    = \"low\",     \"middle education\" = \"middle\",     \"high education\"   = \"high\")      # Define style my_style <- excel_output_style(column_widths = c(2, 15, 15, 15, 9))  # Define titles and footnotes. If you want to add hyperlinks you can do so by # adding \"link:\" followed by the hyperlink to the main text. titles <- c(\"This is title number 1 link: https://cran.r-project.org/\",             \"This is title number 2\",             \"This is title number 3\") footnotes <- c(\"This is footnote number 1\",                \"This is footnote number 2\",                \"This is footnote number 3 link: https://cran.r-project.org/\")  # Output complex tables with different percentages my_data |> any_table(rows       = c(\"sex + age\", \"sex\", \"age\"),                      columns    = c(\"year\", \"education + year\"),                      values     = weight,                      statistics = c(\"sum\", \"pct_group\"),                      pct_group  = c(\"sex\", \"age\"),                      formats    = list(sex = sex., age = age.,                                        education = education.),                      titles     = titles,                      footnotes  = footnotes,                      style      = my_style,                      na.rm      = TRUE) my_style <- my_style |> modify_output_style(sheet_name = \"age_sex\")  # Capture the output of any_table() to get a list which contains the data frame # as well as the formatted workbook. # Note: You can set print to FALSE to prevent the workbook from opening. result_list <- my_data |>            any_table(rows       = c(\"age\"),                      columns    = c(\"sex\"),                      values     = weight,                      statistics = c(\"sum\"),                      formats    = list(sex = sex., age = age.),                      style      = my_style,                      na.rm      = TRUE,                      print      = FALSE)  # Set a new sheet name and define where the final workbook should be saved my_style <- my_style |> modify_output_style(sheet_name = \"edu_year\",                                             file       = \"C:/My_folder/My_workbook.xlsx\")  # Pass on the workbook from before to the next any_table() my_data |> any_table(workbook   = result_list[[\"workbook\"]],                      rows       = c(\"education\"),                      columns    = c(\"year\"),                      values     = weight,                      statistics = c(\"pct_group\"),                      formats    = list(education = education.),                      style      = my_style,                      na.rm      = TRUE)                       # For safety set file back to NULL at the end. Otherwise the next any_table() will overwrite # the existing file. my_style <- my_style |> modify_output_style(file = NULL)"},{"path":"https://s3rdia.github.io/qol/index.html","id":"readability","dir":"","previous_headings":"","what":"Readability","title":"Powerful SAS Inspired Concepts for more Efficient Bigger Outputs","text":"also functions enhance readability code. example - else - else statements like languages:","code":"library(qol)  # Example data frame my_data <- dummy_data(1000)  # Call function new_df <- my_data |>          if.(age < 18,             age_group = \"under 18\") |>     else_if.(age >= 18 & age < 65, age_group = \"18 to under 65\") |>     else.   (                      age_group = \"65 and older\")  # Or with multiple variables new_df <- my_data |>          if.(age < 18,             age_group = \"under 18\"      , age_num = 1L) |>     else_if.(age >= 18 & age < 65, age_group = \"18 to under 65\", age_num = 2L) |>     else.   (                      age_group = \"65 and older\",   age_num = 3L)  # NOTE: As in other languages the following if blocks won't produce the same result. #       if.() will overwrite existing values while else_if.() will not. state_df <- my_data |>          if.(state == 1, state_a = \"State 1\") |>     else_if.(state < 11, state_a = \"West\") |>     else.   (            state_a = \"East\")  state_df <- state_df |>       if.(state == 1, state_b = \"State 1\") |>       if.(state < 11, state_b = \"West\") |>     else.(            state_b = \"East\")"},{"path":"https://s3rdia.github.io/qol/index.html","id":"monitoring","dir":"","previous_headings":"","what":"Monitoring","title":"Powerful SAS Inspired Concepts for more Efficient Bigger Outputs","text":"package also includes basic yet effective performance monitoring functions. heavier functions package already make use can show work internally like :","code":""},{"path":"https://s3rdia.github.io/qol/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 qol authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://s3rdia.github.io/qol/reference/add_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Extensions to Variable Names — add_extension","title":"Add Extensions to Variable Names — add_extension","text":"Renames variables data frame adding desired extensions original names. can useful want use pre summarised data any_table(), needs value variables statistic extensions.","code":""},{"path":"https://s3rdia.github.io/qol/reference/add_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Extensions to Variable Names — add_extension","text":"","code":"add_extension(data_frame, from, extensions, reuse = \"none\")"},{"path":"https://s3rdia.github.io/qol/reference/add_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Extensions to Variable Names — add_extension","text":"data_frame data frame variables gain extensions name. position variable inside data frame start renaming. extensions extensions add. reuse \"none\" default, meaning provided extensions set. E.g. two extensions provided, two variables renamed. \"last\", last provided extension used every following variable end data frame. \"repeat\", provided extensions repeated first one every following variable end data frame.","code":""},{"path":"https://s3rdia.github.io/qol/reference/add_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Extensions to Variable Names — add_extension","text":"Returns data frame extended variable names.","code":""},{"path":"https://s3rdia.github.io/qol/reference/add_extension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Extensions to Variable Names — add_extension","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Add extensions to variable names new_names1 <- my_data |> add_extension(5, c(\"sum\", \"pct\")) new_names2 <- my_data |> add_extension(5, c(\"sum\", \"pct\"), reuse = \"last\") new_names3 <- my_data |> add_extension(5, c(\"sum\", \"pct\"), reuse = \"alternate\")"},{"path":"https://s3rdia.github.io/qol/reference/any_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Any Possible Table — any_table","title":"Compute Any Possible Table — any_table","text":"any_table() produces possible descriptive table 'Excel' format. number variables can nested crossed. output individually styled 'Excel' table, also receives named ranges, making easier read data back .","code":""},{"path":"https://s3rdia.github.io/qol/reference/any_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Any Possible Table — any_table","text":"","code":"any_table(   data_frame,   rows,   columns,   values,   statistics = c(\"sum\"),   pct_group = c(),   pct_value = list(),   formats = list(),   by = c(),   weight = NULL,   order_by = \"stats\",   titles = c(),   footnotes = c(),   var_labels = list(),   stat_labels = list(),   box = \"\",   workbook = NULL,   style = excel_output_style(),   output = \"excel\",   pre_summed = FALSE,   na.rm = FALSE,   print = TRUE,   monitor = FALSE )"},{"path":"https://s3rdia.github.io/qol/reference/any_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Any Possible Table — any_table","text":"data_frame data frame variables tabulate. rows vector provides single variables variable combinations appear table rows. nest variables use form: \"var1 + var2 + var3 + ...\". columns vector provides single variables variable combinations appear table rows. nest variables use form: \"var1 + var2 + var3 + ...\". values vector containing variables summarised. statistics Available functions: \"sum\"       -> Weighted unweighted sum \"sum_wgt\"   -> Sum weights \"freq\"      -> Unweighted frequency \"freq_g0\"   -> Unweighted frequency values greater zero \"pct_group\" -> Weighted unweighted percentages within respective group \"pct_value\" -> Weighted unweighted percentages value variables \"pct_total\" -> Weighted unweighted percentages compared grand total \"mean\"      -> Weighted unweighted mean \"median\"    -> Weighted unweighted median \"mode\"      -> Weighted unweighted mode \"min\"       -> Minimum \"max\"       -> Maximum \"sd\"        -> Weighted unweighted standard deviation \"variance\"  -> Weighted unweighted standard variance \"first\"     -> First value \"last\"      -> Last value \"pn\"        -> Weighted unweighted percentiles (p1, p2, p3, ... possible) \"missing\"   -> Missings generated value variables pct_group pct_group specified statistics, option used determine variable row column variables add 100 %. Multiple variables can specified vector generate multiple group percentages. pct_value pct_value specified statistics, can pass list contains information new variable name value variables percentages computed. formats list specified formats applied variables. Compute tables stratified expressions provided variables. weight Put weight variable compute weighted results. order_by Determine columns ordered. \"value\" orders results order provide variables values. \"stats\" orders order statistics. \"interleaved\" alternates stats. titles Specify one table titles. footnotes Specify one table footnotes. var_labels list specified label printed variable instead variable name. stat_labels list specified label printed statistic instead statistic name. box Provide text upper left box table. workbook Insert previously created workbook expand sheets instead creating new file. style list options can passed control appearance excel outputs. Styles can created excel_output_style(). output following output formats available: excel excel_nostyle. pre_summed FALSE default. TRUE function works pre summarised data. can used, needed results can calculated any_table() need prepared advance. Enabling still make use styled tabulation. work, values carry statistic extension (e.g. \"_sum\", \"_pct\") variable name. na.rm FALSE default. TRUE removes NA values variables. print TRUE default. TRUE prints output, FALSE print anything. Can used one wants catch output data frame workbook. monitor FALSE default. TRUE outputs two charts visualize functions time consumption.","code":""},{"path":"https://s3rdia.github.io/qol/reference/any_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Any Possible Table — any_table","text":"Returns list data table containing results table formatted 'Excel' workbook.","code":""},{"path":"https://s3rdia.github.io/qol/reference/any_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Any Possible Table — any_table","text":"any_table() based 'SAS' procedure Proc Tabulate, provides efficient readable ways perform complex tabulations. function can combine number variables possible way, . just define variables variable combinations end table rows columns simple syntax. Listing variables vector like c(\"var1\", \"var2\", \"var3\",...) means put variables (case row variables) besides (case column variables) . Nesting variables easy putting plus sign , e.g. c(\"var1 + var2\", \"var2\" + \"var3\" + \"var4\", etc.). course can combine versions. real highlight , function creates desired variable combinations exports 'Excel' file, prints fully custom styled table workbook. Setting custom, reusable style easy setting options like: provide color table header, set font size row header, borders drawn table cells yes/, . Merging doubled header texts, happens automatically. function basically can fully concentrate designing table, instead thinking hard calculate put border even manually prepare designed workbook.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/any_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Any Possible Table — any_table","text":"","code":"# Example data frame my_data <- dummy_data(1000) my_data[[\"person\"]] <- 1  # Formats age. <- discrete_format(     \"Total\"          = 0:100,     \"under 18\"       = 0:17,     \"18 to under 25\" = 18:24,     \"25 to under 55\" = 25:54,     \"55 to under 65\" = 55:64,     \"65 and older\"   = 65:100)  sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  education. <- discrete_format(     \"Total\"            = c(\"low\", \"middle\", \"high\"),     \"low education\"    = \"low\",     \"middle education\" = \"middle\",     \"high education\"   = \"high\")  # Define style my_style <- excel_output_style(column_widths = c(2, 15, 15, 15, 9))  # Define titles and footnotes. If you want to add hyperlinks you can do so by # adding \"link:\" followed by the hyperlink to the main text. titles <- c(\"This is title number 1 link: https://cran.r-project.org/\",             \"This is title number 2\",             \"This is title number 3\") footnotes <- c(\"This is footnote number 1\",                \"This is footnote number 2\",                \"This is footnote number 3 link: https://cran.r-project.org/\")  # Output complex tables with different percentages my_data |> any_table(rows       = c(\"sex + age\", \"sex\", \"age\"),                      columns    = c(\"year\", \"education + year\"),                      values     = weight,                      statistics = c(\"sum\", \"pct_group\"),                      pct_group  = c(\"sex\", \"age\", \"education\", \"year\"),                      formats    = list(sex = sex., age = age.,                                        education = education.),                      style      = my_style,                      na.rm      = TRUE)  # If you want to get a clearer vision of what the result table looks like, in terms # of the row and column categories, you can write the code like this, to make out # the variable crossings and see the order. my_data |> any_table(columns = c(            \"year\", \"education + year\"),                      rows    = c(\"sex + age\",                                  \"sex\",                                  \"age\"),                      values     = weight,                      statistics = c(\"sum\", \"pct_group\"),                      pct_group  = c(\"sex\", \"age\", \"education\", \"year\"),                      formats    = list(sex = sex., age = age.,                                        education = education.),                      style      = my_style,                      na.rm      = TRUE)  # Percentages based on value variables instead of categories my_data |> any_table(rows       = c(\"age + year\"),                      columns    = c(\"sex\"),                      values     = c(probability, person),                      statistics = c(\"pct_value\", \"sum\", \"freq\"),                      pct_value  = list(rate = \"probability / person\"),                      weight     = weight,                      formats    = list(sex = sex., age = age.),                      style      = my_style,                      na.rm      = TRUE)  # Customize the visual appearance by adding titles, footnotes and variable # and statistic labels. # Note: You don't have to describe every element. Sometimes a table can be more # readable with less text. To completely remove a variable label just put in an # empty text \"\" as label. my_data |> any_table(rows        = c(\"age + year\"),                      columns     = c(\"sex\"),                      values      = weight,                      statistics  = c(\"sum\", \"pct_group\"),                      order_by    = \"interleaved\",                      formats     = list(sex = sex., age = age.),                      titles      = titles,                      footnotes   = footnotes,                      var_labels  = list(age = \"Age categories\",                                        sex = \"\", weight = \"\"),                      stat_labels = list(pct = \"%\"),                      style       = my_style,                      na.rm       = TRUE)  # With individual styling my_style <- my_style |> modify_output_style(header_back_color = \"0077B6\",                                             font              = \"Times New Roman\")  my_data |> any_table(rows       = c(\"age + year\"),                      columns    = c(\"sex\"),                      values     = c(probability, person),                      statistics = c(\"pct_value\", \"sum\", \"freq\"),                      pct_value  = list(rate = \"probability / person\"),                      weight     = weight,                      formats    = list(sex = sex., age = age.),                      style      = my_style,                      na.rm      = TRUE)  # Pass on workbook to create more sheets in the same file my_style <- my_style |> modify_output_style(sheet_name = \"age_sex\")  result_list <- my_data |>            any_table(rows       = c(\"age\"),                      columns    = c(\"sex\"),                      values     = weight,                      statistics = c(\"sum\"),                      formats    = list(sex = sex., age = age.),                      style      = my_style,                      na.rm      = TRUE,                      print      = FALSE)  my_style <- my_style |> modify_output_style(sheet_name = \"edu_year\")  my_data |> any_table(workbook   = result_list[[\"workbook\"]],                      rows       = c(\"education\"),                      columns    = c(\"year\"),                      values     = weight,                      statistics = c(\"pct_group\"),                      formats    = list(education = education.),                      style      = my_style,                      na.rm      = TRUE)  # Output multiple complex tables by expressions of another variable. # If you specify the sheet name as \"by\" in the output style, the sheet # names are named by the variable expressions of the by-variable. Otherwise # the given sheet named gets a running number. my_style <- my_style |> modify_output_style(sheet_name = \"by\")  my_data |> any_table(rows       = c(\"sex\", \"age\"),                      columns    = c(\"education + year\"),                      values     = weight,                      by         = state,                      statistics = c(\"sum\", \"pct_group\"),                      pct_group  = c(\"education\"),                      formats    = list(sex = sex., age = age., state = state.,                                        education = education.),                      titles     = titles,                      footnotes  = footnotes,                      style      = my_style,                      na.rm      = TRUE)"},{"path":"https://s3rdia.github.io/qol/reference/args_to_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Ellipsis to Character Vector — args_to_char","title":"Convert Ellipsis to Character Vector — args_to_char","text":"define function want user able pass variable names without need stored vector c() list() beforehand without putting names quotation marks, can convert variable list passed ... character vector. Note: user passes list characters returned given.","code":""},{"path":"https://s3rdia.github.io/qol/reference/args_to_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Ellipsis to Character Vector — args_to_char","text":"","code":"args_to_char(...)"},{"path":"https://s3rdia.github.io/qol/reference/args_to_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Ellipsis to Character Vector — args_to_char","text":"... Used variable names listed ... without need put c() list()","code":""},{"path":"https://s3rdia.github.io/qol/reference/args_to_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Ellipsis to Character Vector — args_to_char","text":"Returns character vector","code":""},{"path":"https://s3rdia.github.io/qol/reference/args_to_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Ellipsis to Character Vector — args_to_char","text":"","code":"# Example function print_vnames <- function(...){     var_names <- args_to_char(...)     print(var_names) }  print_vnames(age, sex, income, weight) print_vnames(\"age\", \"sex\", \"income\", \"weight\")  # You can also pass in a character vector, if you have stored variable names elsewhere var_names <- c(\"age\", \"sex\", \"income\", \"weight\") print_vnames(var_names)"},{"path":"https://s3rdia.github.io/qol/reference/build_master.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Master Script From Folder — build_master","title":"Build a Master Script From Folder — build_master","text":"build_master() reads given folder structure, contains scripts, builds master script markdown file.","code":""},{"path":"https://s3rdia.github.io/qol/reference/build_master.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Master Script From Folder — build_master","text":"","code":"build_master(   dir,   master_name = \"Master\",   with_structure = TRUE,   with_run_all = TRUE,   with_run_folder = TRUE )"},{"path":"https://s3rdia.github.io/qol/reference/build_master.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Master Script From Folder — build_master","text":"dir folder structure contains scripts build upon. master_name file name written. with_structure Whether folder structure tree written master script. with_run_all Whether section, user run scripts, written master script. with_run_folder Whether section, user run scripts specific folder, written master script.","code":""},{"path":"https://s3rdia.github.io/qol/reference/build_master.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Master Script From Folder — build_master","text":"Returns script character vector saves markdown file.","code":""},{"path":"https://s3rdia.github.io/qol/reference/build_master.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a Master Script From Folder — build_master","text":"function works folder structures look like : root/","code":"subfolder1/       script1.R       script2.R       ....R   subfolder2/       script3.R       script4.R       ....R   .../       ....R"},{"path":"https://s3rdia.github.io/qol/reference/build_master.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a Master Script From Folder — build_master","text":"","code":"build_master(dir = \"C:/My Projects/Code\", master_name = \"Master Script\")"},{"path":"https://s3rdia.github.io/qol/reference/convert_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and Convert to Numeric — convert_numeric","title":"Check and Convert to Numeric — convert_numeric","text":"is_numeric() checks whether values given variable, NA, numerical. convert_numeric() converts given variables numeric possible. variable contains none numerical values (including NAs), variable converted.","code":""},{"path":"https://s3rdia.github.io/qol/reference/convert_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and Convert to Numeric — convert_numeric","text":"","code":"is_numeric(variable)  convert_numeric(data_frame, variables)"},{"path":"https://s3rdia.github.io/qol/reference/convert_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and Convert to Numeric — convert_numeric","text":"variable vector values check. data_frame data frame containing variables convert. variables Variables data frame converted numeric.","code":""},{"path":"https://s3rdia.github.io/qol/reference/convert_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and Convert to Numeric — convert_numeric","text":"is_numeric() returns TRUE none NA values numerical, otherwise FALSE. convert_numeric() returns data frame converted variables possible.","code":""},{"path":"https://s3rdia.github.io/qol/reference/convert_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and Convert to Numeric — convert_numeric","text":"","code":"# Check if vectors contain only numeric values test_vector1 <- c(1, 2, 3, NA, 4, 5) test_vector2 <- c(1, 2, \"Hello\", NA, 4, 5)  numeric_check1 <- is_numeric(test_vector1) numeric_check2 <- is_numeric(test_vector2)  # Convert variables in a data frame to numeric where possible test_df <- data.frame(var_a = c(1, 2, 3, NA, 4, 5),                       var_b = c(1, 2, \"Hello\", NA, 4, 5))  convert_df <- test_df |> convert_numeric(c(\"var_a\", \"var_b\"))"},{"path":"https://s3rdia.github.io/qol/reference/crosstabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Cross Table of Two Variables — crosstabs","title":"Display Cross Table of Two Variables — crosstabs","text":"crosstabs() produces cross table two variables. Statistics can weighted sums, unweighted frequencies different percentages.","code":""},{"path":"https://s3rdia.github.io/qol/reference/crosstabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Cross Table of Two Variables — crosstabs","text":"","code":"crosstabs(   data_frame,   rows,   columns,   statistics = c(\"sum\"),   formats = c(),   by = c(),   weight = NULL,   titles = c(),   footnotes = c(),   style = excel_output_style(),   output = \"console\",   na.rm = FALSE,   print = TRUE,   monitor = FALSE )"},{"path":"https://s3rdia.github.io/qol/reference/crosstabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display Cross Table of Two Variables — crosstabs","text":"data_frame data frame variables tabulate. rows variable appears table rows. columns variable appears table columns. statistics user requested statistics.Available functions: \"sum\"        -> Weighted unweighted sum \"freq\"       -> Unweighted frequency \"pct_row\"    -> Weighted unweighted row percentages \"pct_column\" -> Weighted unweighted column percentages \"pct_total\"  -> Weighted unweighted percentages compared grand total formats list specified formats applied variables. Compute tables stratified expressions provided variables. weight Put weight variable compute weighted results. titles Specify one table titles. footnotes Specify one table footnotes. style list options can passed control appearance excel outputs. Styles can created excel_output_style(). output following output formats available: console (default), text, excel excel_nostyle. na.rm FALSE default. TRUE removes NA values variables. print TRUE default. TRUE prints output, FALSE print anything. Can used one wants catch output data frame. monitor FALSE default. TRUE outputs two charts visualize functions time consumption.","code":""},{"path":"https://s3rdia.github.io/qol/reference/crosstabs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display Cross Table of Two Variables — crosstabs","text":"Returns data tables containing results cross table.","code":""},{"path":"https://s3rdia.github.io/qol/reference/crosstabs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display Cross Table of Two Variables — crosstabs","text":"crosstabs() based 'SAS' procedure Proc Freq, provides efficient readable ways perform cross tabulations. create cross table need provide variable rows columns. Nothing special . real power comes play, output tables fully styled 'Excel' workbook. Setting custom, reusable style easy setting options like: provide color table header, set font size row header, borders drawn table cells yes/, . can output sums frequencies, also different percentages, set separate, evenly designed tables. just quick overview, rather fully designed tables, can also just output tables ASCII style format.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/crosstabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display Cross Table of Two Variables — crosstabs","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Define titles and footnotes. If you want to add hyperlinks you can do so by # adding \"link:\" followed by the hyperlink to the main text. titles <- c(\"This is title number 1 link: https://cran.r-project.org/\",             \"This is title number 2\",             \"This is title number 3\") footnotes <- c(\"This is footnote number 1\",                \"This is footnote number 2\",                \"This is footnote number 3 link: https://cran.r-project.org/\")  # Output cross tables my_data |> crosstabs(age, sex) my_data |> crosstabs(age, sex,                      weight = \"weight\")  # Also works with characters my_data |> crosstabs(\"age\", \"sex\") my_data |> crosstabs(\"age\", \"sex\",                      weight = \"weight\")  # Applying formats and titles age. <- discrete_format(     \"Total\"          = 0:100,     \"under 18\"       = 0:17,     \"18 to under 25\" = 18:24,     \"25 to under 55\" = 25:54,     \"55 to under 65\" = 55:64,     \"65 and older\"   = 65:100)  sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  my_data |> crosstabs(age, sex,                      formats   = list(age = age., sex = sex.),                      titles    = titles,                      footnotes = footnotes)  # Split cross table by expressions of another variable my_data |> crosstabs(age, sex, by = education)  # Compute different stats my_data |> crosstabs(age, sex,                      statistics = c(\"sum\", \"freq\", \"pct_row\", \"pct_column\", \"pct_total\"))  # Get a list with two data tables for further usage result_list <- my_data |> crosstabs(age, sex,                                     formats = list(age = age., sex = sex.))  # Output in text file my_data |> crosstabs(age, sex, output = \"text\")  # Output to Excel my_data |> crosstabs(age, sex, output = \"excel\")  # With individual styling my_style <- excel_output_style(header_back_color = \"0077B6\",                                font              = \"Times New Roman\")  my_data |> crosstabs(age, sex, output = \"excel\", style = my_style)"},{"path":"https://s3rdia.github.io/qol/reference/drop_type_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop automatically generated Variables — drop_type_vars","title":"Drop automatically generated Variables — drop_type_vars","text":"summarise_plus() used nested options \"\" \"single\", three variables automatically generated: TYPE, TYPE_NR DEPTH. functions variables dropped.","code":""},{"path":"https://s3rdia.github.io/qol/reference/drop_type_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop automatically generated Variables — drop_type_vars","text":"","code":"drop_type_vars(data_frame)"},{"path":"https://s3rdia.github.io/qol/reference/drop_type_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop automatically generated Variables — drop_type_vars","text":"data_frame data frame automatically generated variables.","code":""},{"path":"https://s3rdia.github.io/qol/reference/drop_type_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop automatically generated Variables — drop_type_vars","text":"Returns data frame without variables TYPE, TYPE_NR DEPTH.","code":""},{"path":"https://s3rdia.github.io/qol/reference/drop_type_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop automatically generated Variables — drop_type_vars","text":"","code":"# Example format sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  # Example data frame my_data <- dummy_data(1000)  # Call function all_possible <- my_data |>     summarise_plus(class      = c(year, sex),                    values     = c(income, probability),                    statistics = c(\"sum\", \"mean\", \"freq\"),                    formats    = list(sex = \"sex.\"),                    weight     = weight,                    nesting    = \"all\",                    na.rm      = TRUE) |>     drop_type_vars()"},{"path":"https://s3rdia.github.io/qol/reference/dummy_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy Data — dummy_data","title":"Dummy Data — dummy_data","text":"dummy data frame contains randomly generated variables like year, sex, age, income weight test functionalities. can generated desired number observations.","code":""},{"path":"https://s3rdia.github.io/qol/reference/dummy_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dummy Data — dummy_data","text":"","code":"dummy_data(no_obs, monitor = FALSE)"},{"path":"https://s3rdia.github.io/qol/reference/dummy_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dummy Data — dummy_data","text":"no_obs Number observations. monitor FALSE default. TRUE outputs two charts visualize functions time consumption.","code":""},{"path":"https://s3rdia.github.io/qol/reference/dummy_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dummy Data — dummy_data","text":"Returns dummy data table.","code":""},{"path":"https://s3rdia.github.io/qol/reference/dummy_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dummy Data — dummy_data","text":"","code":"my_data <- dummy_data(1000)"},{"path":"https://s3rdia.github.io/qol/reference/excel_output_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Style for 'Excel' Table Outputs — excel_output_style","title":"Style for 'Excel' Table Outputs — excel_output_style","text":"Set different options define visual output 'Excel' tables produced frequencies(), crosstabs() any_table().","code":""},{"path":"https://s3rdia.github.io/qol/reference/excel_output_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style for 'Excel' Table Outputs — excel_output_style","text":"","code":"excel_output_style(   file = NULL,   sheet_name = \"Table\",   font = \"Arial\",   column_widths = \"auto\",   row_heights = \"auto\",   title_heights = NULL,   header_heights = NULL,   table_heights = NULL,   footnote_heights = NULL,   start_row = 2,   start_column = 2,   freeze_col_header = FALSE,   freeze_row_header = FALSE,   filters = TRUE,   grid_lines = TRUE,   header_back_color = \"FFFFFF\",   header_font_color = \"000000\",   header_font_size = 10,   header_font_bold = TRUE,   header_alignment = \"center\",   header_wrap = \"1\",   header_indent = 0,   header_borders = TRUE,   header_border_color = \"000000\",   cat_col_back_color = \"FFFFFF\",   cat_col_font_color = \"000000\",   cat_col_font_size = 10,   cat_col_font_bold = FALSE,   cat_col_alignment = \"left\",   cat_col_wrap = \"1\",   cat_col_indent = 1,   cat_col_borders = TRUE,   cat_col_border_color = \"000000\",   table_back_color = \"FFFFFF\",   table_font_color = \"000000\",   table_font_size = 10,   table_font_bold = FALSE,   table_alignment = \"right\",   table_indent = 1,   table_borders = FALSE,   table_border_color = \"000000\",   box_back_color = \"FFFFFF\",   box_font_color = \"000000\",   box_font_size = 10,   box_font_bold = TRUE,   box_alignment = \"center\",   box_wrap = \"1\",   box_indent = 0,   box_borders = TRUE,   box_border_color = \"000000\",   number_formats = number_format_style(),   title_font_color = \"000000\",   title_font_size = 10,   title_font_bold = TRUE,   title_alignment = \"left\",   footnote_font_color = \"000000\",   footnote_font_size = 8,   footnote_font_bold = FALSE,   footnote_alignment = \"left\",   na_symbol = \".\" )"},{"path":"https://s3rdia.github.io/qol/reference/excel_output_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Style for 'Excel' Table Outputs — excel_output_style","text":"file NULL, opens output temporary file. filename path specified, saves output specified path. sheet_name Name sheet inside workbook output shall written. multiple outputs produced one go, sheet name additionally receives running number. font Set font used entire output. column_widths Specify whether column widths set automatically individually numeric vector passed column width can specified manually. table columns column widths provided, last given column width repeated end table. row_heights Specify whether row heights set automatically individually numeric vector passed row height can specified manually. table rows row heights provided, last given row height repeated end table. title_heights Set individual row heights titles . header_heights Set individual row heights table header . table_heights Set individual row heights table body . footnote_heights Set individual row heights footnotes . start_row row table starts. start_column column table starts. freeze_col_header Whether freeze column header always visible scrolling document. freeze_row_header Whether freeze row header always visible scrolling sideways document. filters Whether set filters column header, exporting data frame. grid_lines Whether show grid lines . header_back_color Background cell color table header. header_font_color Font color table header. header_font_size Font size table header. header_font_bold Whether print table header bold letters. header_alignment Set text alignment table header. header_wrap Whether wrap texts table header. header_indent Indentation level table header. header_borders Whether draw borders around table header cells. header_border_color Borders colors table header cells. cat_col_back_color Background cell color category columns inside table. cat_col_font_color Font color category columns inside table. cat_col_font_size Font size category columns inside table. cat_col_font_bold Whether print category columns inside table bold letters. cat_col_alignment Set text alignment category columns inside table. cat_col_wrap Whether wrap texts category columns inside table. cat_col_indent Indentation level category columns inside table. cat_col_borders Whether draw borders around category columns inside table. cat_col_border_color Borders colors category columns inside table. table_back_color Background color inner table cells. table_font_color Font color inner table cells. table_font_size Font size inner table cells. table_font_bold Whether print inner table cells bold numbers table_alignment Set text alignment inner table cells. table_indent Indentation level inner table cells. table_borders Whether draw borders around inner table cells. table_border_color Borders colors inner table cells. box_back_color Background color left box table header. box_font_color Font color left box table header. box_font_size Font size left box table header. box_font_bold Whether print left box table header bold letters. box_alignment Set text alignment left box table header. box_wrap Whether wrap texts left box table header. box_indent Indentation level left box table header. box_borders Whether draw borders around left box table header. box_border_color Borders colors left box table header. number_formats Put list number formats assigned different stats. Number formats can created number_format_style(). title_font_color Font color titles. title_font_size Font size tables titles. title_font_bold Whether print tables titles bold letters. title_alignment Set text alignment titles. footnote_font_color Font color footnotes footnote_font_size Font size tables footnotes footnote_font_bold Whether print tables footnotes bold letters. footnote_alignment Set text alignment footnotes. na_symbol Define symbol used NA values.","code":""},{"path":"https://s3rdia.github.io/qol/reference/excel_output_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Style for 'Excel' Table Outputs — excel_output_style","text":"Returns list named style options.","code":""},{"path":"https://s3rdia.github.io/qol/reference/excel_output_style.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Style for 'Excel' Table Outputs — excel_output_style","text":"excel_output_style() based Output Delivery System (ODS) 'SAS', provides efficient readable ways set different table styles. output style full control table design. need think calculating right place input background color border certain type loop multiple cells. Just input colors, borders, font styles, etc. different table parts everything else handled functions capable using styles. concept basically : design complex calculations.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/excel_output_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Style for 'Excel' Table Outputs — excel_output_style","text":"","code":"# For default values excel_style <- excel_output_style()  # Set specific options, the rest will be set to default values excel_style <- excel_output_style(font       = \"Calibri\",                                   sheet_name = \"My_Output\")  # For cells with no background color pass an empty string excel_style <- excel_output_style(table_back_color = \"\")"},{"path":"https://s3rdia.github.io/qol/reference/export_with_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Data Frame With Style — export_with_style","title":"Export Data Frame With Style — export_with_style","text":"export_with_style() prints data frame individually styled 'Excel' table. Titles, footnotes labels variable names can optionally added.","code":""},{"path":"https://s3rdia.github.io/qol/reference/export_with_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Data Frame With Style — export_with_style","text":"","code":"export_with_style(   data_frame,   titles = c(),   footnotes = c(),   var_labels = list(),   workbook = NULL,   style = excel_output_style(),   output = \"excel\",   print = TRUE,   monitor = FALSE )"},{"path":"https://s3rdia.github.io/qol/reference/export_with_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Data Frame With Style — export_with_style","text":"data_frame data frame print. titles Specify one table titles. footnotes Specify one table footnotes. var_labels list specified label printed variable instead variable name. workbook Insert previously created workbook expand sheets instead creating new file. style list options can passed control appearance excel outputs. Styles can created excel_output_style(). output following output formats available: excel excel_nostyle. print TRUE default. TRUE prints output, FALSE print anything. Can used one wants catch output workbook. monitor FALSE default. TRUE outputs two charts visualize functions time consumption.","code":""},{"path":"https://s3rdia.github.io/qol/reference/export_with_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Data Frame With Style — export_with_style","text":"Returns formatted 'Excel' workbook.","code":""},{"path":"https://s3rdia.github.io/qol/reference/export_with_style.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export Data Frame With Style — export_with_style","text":"export_with_style() based 'SAS' procedure Proc Print, outputs data frame styled table.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/export_with_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Data Frame With Style — export_with_style","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Define style my_style <- excel_output_style(column_widths = c(2, 15, 15, 15, 9))  # Define titles and footnotes. If you want to add hyperlinks you can do so by # adding \"link:\" followed by the hyperlink to the main text. titles <- c(\"This is title number 1 link: https://cran.r-project.org/\",             \"This is title number 2\",             \"This is title number 3\") footnotes <- c(\"This is footnote number 1\",                \"This is footnote number 2\",                \"This is footnote number 3 link: https://cran.r-project.org/\")  # Print styled data frame my_data |> export_with_style(titles    = titles,                              footnotes = footnotes,                              style     = my_style)  # Retrieve formatted workbook for further usage wb <- my_data |>     export_with_style(titles    = titles,                       footnotes = footnotes,                       style     = my_style)"},{"path":"https://s3rdia.github.io/qol/reference/formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Format Container — formats","title":"Create Format Container — formats","text":"Create format container stores discrete interval values corresponding labels can applied using summarise_plus(). Create format container independent data frame. Define values recoded new categories, format applied variable data frame. possible assign single value multiple new categories create multilabel. recommended let format names end dot make stand .","code":""},{"path":"https://s3rdia.github.io/qol/reference/formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Format Container — formats","text":"","code":"discrete_format(...)  interval_format(...)"},{"path":"https://s3rdia.github.io/qol/reference/formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Format Container — formats","text":"... List desired recodings/recoding ranges. Every element contains text new category name values/value ranges recoded new category.","code":""},{"path":"https://s3rdia.github.io/qol/reference/formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Format Container — formats","text":"Returns data table contains values/value ranges corresponding labels","code":""},{"path":"https://s3rdia.github.io/qol/reference/formats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Format Container — formats","text":"concept formats molds stencils put data , inspired 'SAS' formats. 'SAS' formats defined procedure Proc Formats, adapted discrete_format() interval_format(). can define, values transferred result categories. completely detached data working . great thing , one can label recode values, one can also define called multilabels. Meaning, one original value can transferred multiple result categories. cell data frame can hold one distinct value, normally good thing. say want convert single ages age categories. age \"3\" example go category \"6\", also \"12\", \"18\" \"total\". Normally compute additional variables, hold different categorizations, also double observations category. ways just bloat data frame cost additional memory, particularly work big data sets. format containers, just keep small reference original values result categories. Formats data find way together just computing results, meaning original data frame can passed function capable handling formats (see ), without data transformation beforehand. just tell function format applied variable. . function handles rest outputs desired categories. method memory efficient, readable user friendly creating larger complex outputs time.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Format Container — formats","text":"","code":"age. <- discrete_format(     \"Total\"          = 0:100,     \"under 18\"       = 0:17,     \"18 to under 25\" = 18:24,     \"25 to under 55\" = 25:54,     \"55 to under 65\" = 55:64,     \"65 and older\"   = 65:100)  sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  education. <- discrete_format(     \"Total\"            = c(\"low\", \"middle\", \"high\"),     \"low education\"    = \"low\",     \"middle education\" = \"middle\",     \"high education\"   = \"high\")  income. <- interval_format(     \"Total\"              = 0:99999,     \"below 500\"          = 0:499,     \"500 to under 1000\"  = 500:999,     \"1000 to under 2000\" = 1000:1999,     \"2000 and more\"      = 2000:99999)  state. <- discrete_format(     \"Germany\"                       = 1:16,     \"Schleswig-Holstein\"            = 1,     \"Hamburg\"                       = 2,     \"Lower Saxony\"                  = 3,     \"Bremen\"                        = 4,     \"North Rhine-Westphalia\"        = 5,     \"Hesse\"                         = 6,     \"Rhineland-Palatinate\"          = 7,     \"Baden-Württemberg\"             = 8,     \"Bavaria\"                       = 9,     \"Saarland\"                      = 10,     \"West\"                          = 1:10,     \"Berlin\"                        = 11,     \"Brandenburg\"                   = 12,     \"Mecklenburg-Western Pomerania\" = 13,     \"Saxony\"                        = 14,     \"Saxony-Anhalt\"                 = 15,     \"Thuringia\"                     = 16,     \"East\"                          = 11:16)"},{"path":"https://s3rdia.github.io/qol/reference/frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Frequency Tables of Single Variables — frequencies","title":"Display Frequency Tables of Single Variables — frequencies","text":"frequencies() produces two kinds tables quick overview single variables. first table broader overview contains mean, sd, min, max, freq missings. second table actual frequency table shows weighted sums, percentages unweighted frequencies per expression.","code":""},{"path":"https://s3rdia.github.io/qol/reference/frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Frequency Tables of Single Variables — frequencies","text":"","code":"frequencies(   data_frame,   variables,   formats = c(),   by = c(),   weight = NULL,   titles = c(),   footnotes = c(),   style = excel_output_style(),   output = \"console\",   na.rm = FALSE,   print = TRUE,   monitor = FALSE )"},{"path":"https://s3rdia.github.io/qol/reference/frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display Frequency Tables of Single Variables — frequencies","text":"data_frame data frame variables tabulate. variables vector single variables create frequency tables . formats list specified formats applied variables. Compute tables stratified expressions provided variables. weight Put weight variable compute weighted results. titles Specify one table titles. footnotes Specify one table footnotes. style list options can passed control appearance excel outputs. Styles can created excel_output_style(). output following output formats available: console (default), text, excel excel_nostyle. na.rm FALSE default. TRUE removes NA values variables. print TRUE default. TRUE prints output, FALSE print anything. Can used one wants catch output data frame. monitor FALSE default. TRUE outputs two charts visualize functions time consumption.","code":""},{"path":"https://s3rdia.github.io/qol/reference/frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display Frequency Tables of Single Variables — frequencies","text":"Returns list two data tables containing results frequency tables.","code":""},{"path":"https://s3rdia.github.io/qol/reference/frequencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display Frequency Tables of Single Variables — frequencies","text":"frequencies() based 'SAS' procedure Proc Freq, provides efficient readable ways output frequency tables. create frequency table need provide single variable. Nothing special . real power comes play, output tables fully styled 'Excel' workbook. Setting custom, reusable style easy setting options like: provide color table header, set font size row header, borders drawn table cells yes/, . also can provide multiple single variables generate multiple, evenly designed tables, . just quick overview, rather fully designed tables, can also just output tables ASCII style format.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/frequencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display Frequency Tables of Single Variables — frequencies","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Define titles and footnotes. If you want to add hyperlinks you can do so by # adding \"link:\" followed by the hyperlink to the main text. titles <- c(\"This is title number 1 link: https://cran.r-project.org/\",             \"This is title number 2\",             \"This is title number 3\") footnotes <- c(\"This is footnote number 1\",                \"This is footnote number 2\",                \"This is footnote number 3 link: https://cran.r-project.org/\")  # Output frequencies tables my_data |> frequencies(sex) my_data |> frequencies(c(age, education),                        weight = weight)  # Also works with characters my_data |> frequencies(\"sex\") my_data |> frequencies(c(\"age\", \"education\"),                        weight = \"weight\")  # Applying formats and titles sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  my_data |> frequencies(sex, formats(sex = sex.),                        titles    = titles,                        footnotes = footnotes)  # Split frequencies by expressions of another variable my_data |> frequencies(sex, by = education)  # Get a list with two data tables for further usage result_list <- my_data |> frequencies(sex, formats(sex = sex.))  # Output in text file my_data |> frequencies(sex, output = \"text\")  # Output to Excel my_data |> frequencies(sex, output = \"excel\")  # With individual styling my_style <- excel_output_style(header_back_color = \"0077B6\",                                font              = \"Times New Roman\")  my_data |> frequencies(sex, output = \"excel\", style = my_style)"},{"path":"https://s3rdia.github.io/qol/reference/fuse_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Fuse Multiple Variables — fuse_variables","title":"Fuse Multiple Variables — fuse_variables","text":"situation multiple variables different NA values happen different places (one variable value NA vice versa) can fuse together single variable.","code":""},{"path":"https://s3rdia.github.io/qol/reference/fuse_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fuse Multiple Variables — fuse_variables","text":"","code":"fuse_variables(   data_frame,   new_variable_name,   variables_to_fuse,   drop_original_vars = TRUE )"},{"path":"https://s3rdia.github.io/qol/reference/fuse_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fuse Multiple Variables — fuse_variables","text":"data_frame data frame variables fuse. new_variable_name name new fused variable. variables_to_fuse vector variables fused together. drop_original_vars Whether drop keep original values. TRUE default.","code":""},{"path":"https://s3rdia.github.io/qol/reference/fuse_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fuse Multiple Variables — fuse_variables","text":"Returns data frame without variables TYPE, TYPE_NR DEPTH.","code":""},{"path":"https://s3rdia.github.io/qol/reference/fuse_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fuse Multiple Variables — fuse_variables","text":"","code":"# Example format sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  # Example data frame my_data <- dummy_data(1000)  # Call function all_possible <- my_data |>     summarise_plus(class      = c(year, sex),                    values     = c(income, probability),                    statistics = c(\"sum\", \"mean\", \"freq\"),                    formats    = list(sex = \"sex.\"),                    weight     = weight,                    nesting    = \"all\",                    na.rm      = TRUE)  all_possible <- all_possible[DEPTH <= 1] |>     fuse_variables(\"fusion\", c(\"year\", \"sex\"))  # NOTE: You can generally use this function to fuse variables. What is done in #       multiple steps above can be achieved by just using nested = \"single\" in #       summarise_plus. single <- my_data |>     summarise_plus(class      = c(year, sex),                    values     = c(income, probability),                    statistics = c(\"sum\", \"mean\", \"freq\"),                    formats    = list(sex = \"sex.\"),                    weight     = weight,                    nesting    = \"single\",                    na.rm      = TRUE)"},{"path":"https://s3rdia.github.io/qol/reference/get_excel_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts Numbers into 'Excel' Ranges — get_excel_range","title":"Converts Numbers into 'Excel' Ranges — get_excel_range","text":"Converts column number according letter form cell reference like used 'Excel' (e.g \"A1\"). Also can compute range cell cell (e.g. \"A1:BY22\").","code":""},{"path":"https://s3rdia.github.io/qol/reference/get_excel_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts Numbers into 'Excel' Ranges — get_excel_range","text":"","code":"get_excel_range(   row = NULL,   column = NULL,   from_row = NULL,   from_column = NULL,   to_row = NULL,   to_column = NULL )"},{"path":"https://s3rdia.github.io/qol/reference/get_excel_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts Numbers into 'Excel' Ranges — get_excel_range","text":"row Single row number. column Single column number. from_row Range start row. from_column Range start column. to_row Range end row. to_column Range end column.","code":""},{"path":"https://s3rdia.github.io/qol/reference/get_excel_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts Numbers into 'Excel' Ranges — get_excel_range","text":"Returns character 'Excel' range.","code":""},{"path":"https://s3rdia.github.io/qol/reference/get_excel_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts Numbers into 'Excel' Ranges — get_excel_range","text":"","code":"single_cell <- get_excel_range(row = 1, column = 6) range       <- get_excel_range(from_row = 1, from_column = 6,                                  to_row = 5,   to_column = 35)"},{"path":"https://s3rdia.github.io/qol/reference/if_else.html","id":null,"dir":"Reference","previous_headings":"","what":"If - Else if - Else Statements — if_else","title":"If - Else if - Else Statements — if_else","text":"functions make statements readable. Especially block becomes bigger can hard read multiple nested if_else statements. new functions blocks can written like languages clear simpler structure. addition one variable can new value assigned, multiple. .() always creates new variable given variable name part given data frame. already variable given name, existing values overwritten condition TRUE. new variable provided, .() select observations given condition instead. else_if.() acts already variable given name. NA values get new values condition TRUE. existing values overwritten. else.() acts already variable given name. Sets every remaining NA given variable given value.","code":""},{"path":"https://s3rdia.github.io/qol/reference/if_else.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"If - Else if - Else Statements — if_else","text":"","code":"if.(data_frame, condition, ...)  else_if.(data_frame, condition, ...)  else.(data_frame, ...)"},{"path":"https://s3rdia.github.io/qol/reference/if_else.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"If - Else if - Else Statements — if_else","text":"data_frame data frame apply statement. condition condition value passed variable. ... Assignment happen condition becomes TRUE.","code":""},{"path":"https://s3rdia.github.io/qol/reference/if_else.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"If - Else if - Else Statements — if_else","text":"Returns data frame conditionally computed variables. assigned values different types character variable returned.","code":""},{"path":"https://s3rdia.github.io/qol/reference/if_else.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"If - Else if - Else Statements — if_else","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Call function new_df <- my_data |>          if.(age < 18,             age_group = \"under 18\") |>     else_if.(age >= 18 & age < 65, age_group = \"18 to under 65\") |>     else.   (                      age_group = \"65 and older\")  # Or with multiple variables new_df <- my_data |>          if.(age < 18,             age_group = \"under 18\"      , age_num = 1L) |>     else_if.(age >= 18 & age < 65, age_group = \"18 to under 65\", age_num = 2L) |>     else.   (                      age_group = \"65 and older\",   age_num = 3L)  # NOTE: As in other languages the following if blocks won't produce the same result. #       if.() will overwrite existing values, while else_if.() will not. state_df <- my_data |>          if.(state == 1, state_a = \"State 1\") |>     else_if.(state < 11, state_a = \"West\") |>     else.   (            state_a = \"East\")  state_df <- state_df |>       if.(state == 1, state_b = \"State 1\") |>       if.(state < 11, state_b = \"West\") |>     else.(            state_b = \"East\")  # Select observations by condition instead of generating new variable subset_df <- my_data |> if.(sex == 1)"},{"path":"https://s3rdia.github.io/qol/reference/inverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Variable Names which are not Part of the Given Vector — inverse","title":"Get Variable Names which are not Part of the Given Vector — inverse","text":"stored variable names inside character vector, function gives inverse variable name vector.","code":""},{"path":"https://s3rdia.github.io/qol/reference/inverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Variable Names which are not Part of the Given Vector — inverse","text":"","code":"inverse(data_frame, var_names)"},{"path":"https://s3rdia.github.io/qol/reference/inverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Variable Names which are not Part of the Given Vector — inverse","text":"data_frame data frame take variable names. var_names character vector variable names.","code":""},{"path":"https://s3rdia.github.io/qol/reference/inverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Variable Names which are not Part of the Given Vector — inverse","text":"Returns inverse vector variable names compared given vector.","code":""},{"path":"https://s3rdia.github.io/qol/reference/inverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Variable Names which are not Part of the Given Vector — inverse","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Get variable names var_names <- c(\"year\", \"age\", \"sex\") other_names <- my_data |> inverse(var_names)  # Can also be used to just get all variable names all_names <- my_data |> inverse(NULL) all_names <- my_data |> inverse(character(0))"},{"path":"https://s3rdia.github.io/qol/reference/keep_dropp.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep and Drop Variables Inside a Data Frame — keep_dropp","title":"Keep and Drop Variables Inside a Data Frame — keep_dropp","text":"keep() enables put vector variable names kept inside given data frame. variables dropped. dropp() enables put vector variable names dropped given data frame. variables kept.","code":""},{"path":"https://s3rdia.github.io/qol/reference/keep_dropp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep and Drop Variables Inside a Data Frame — keep_dropp","text":"","code":"keep(data_frame, ..., order_vars = FALSE)  dropp(data_frame, ...)"},{"path":"https://s3rdia.github.io/qol/reference/keep_dropp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep and Drop Variables Inside a Data Frame — keep_dropp","text":"data_frame data frame reduced (keep) (drop) specified variables. ... variable names keep/drop. order_vars keep: end variables ordered specified command.","code":""},{"path":"https://s3rdia.github.io/qol/reference/keep_dropp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep and Drop Variables Inside a Data Frame — keep_dropp","text":"Returns reduced data table.","code":""},{"path":"https://s3rdia.github.io/qol/reference/keep_dropp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep and Drop Variables Inside a Data Frame — keep_dropp","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Call function new_dt1 <- my_data |> keep(year, age, sex) new_dt2 <- my_data |> keep(weight, income, education, sex, order_vars = TRUE) new_dt3 <- my_data |> dropp(year, age, sex)  # Also works with characters new_dt4 <- my_data |> keep(\"year\", \"age\", \"sex\") new_dt5 <- my_data |> dropp(\"year\", \"age\", \"sex\")  # Or variable names stored as a character vector var_names <- c(\"age\", \"sex\", \"income\", \"weight\")  new_dt6 <- my_data |> keep(var_names) new_dt7 <- my_data |> dropp(var_names)"},{"path":"https://s3rdia.github.io/qol/reference/modify_number_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify Number Formats Used by any_table() — modify_number_formats","title":"Modify Number Formats Used by any_table() — modify_number_formats","text":"Modify previously created number formats number_format_style().","code":""},{"path":"https://s3rdia.github.io/qol/reference/modify_number_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify Number Formats Used by any_table() — modify_number_formats","text":"","code":"modify_number_formats(formats_to_modify, ...)"},{"path":"https://s3rdia.github.io/qol/reference/modify_number_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify Number Formats Used by any_table() — modify_number_formats","text":"formats_to_modify Pre created number formats certain elements modified rest kept . ... Pass names corresponding new values existing number formats.","code":""},{"path":"https://s3rdia.github.io/qol/reference/modify_number_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify Number Formats Used by any_table() — modify_number_formats","text":"Returns modified list number format options.","code":""},{"path":"https://s3rdia.github.io/qol/reference/modify_number_formats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify Number Formats Used by any_table() — modify_number_formats","text":"modify_number_formats() based 'SAS' number formats Output Delivery System (ODS), provides efficient readable ways set different table styles. number format style full control formatting numbers according different statistics. need think calculating right place input number formats loop multiple cells. Just input different number formats decimals different statistics everything else handled functions capable using number styles. concept basically : design complex calculations.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/modify_number_formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify Number Formats Used by any_table() — modify_number_formats","text":"","code":"# For default values format_list <- number_format_style(pct_excel    = \"0.00000000\",                                    pct_decimals = 8)  # Set specific options, the rest will be kept as is format_list <- format_list |> modify_number_formats(sum_excel = \"#,###,##0.000\")  # IMPORTANT: Don't forget to add individual formats to an excel style, otherwise # they won't come into affect. excel_style <- excel_output_style(number_formats = format_list)"},{"path":"https://s3rdia.github.io/qol/reference/modify_output_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify Style for 'Excel' Table Outputs — modify_output_style","title":"Modify Style for 'Excel' Table Outputs — modify_output_style","text":"Modify previously created style excel_output_style().","code":""},{"path":"https://s3rdia.github.io/qol/reference/modify_output_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify Style for 'Excel' Table Outputs — modify_output_style","text":"","code":"modify_output_style(style_to_modify, ...)"},{"path":"https://s3rdia.github.io/qol/reference/modify_output_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify Style for 'Excel' Table Outputs — modify_output_style","text":"style_to_modify pre created style certain elements modified rest kept . ... Pass names corresponding new values existing style elements.","code":""},{"path":"https://s3rdia.github.io/qol/reference/modify_output_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify Style for 'Excel' Table Outputs — modify_output_style","text":"Returns modified list named style options.","code":""},{"path":"https://s3rdia.github.io/qol/reference/modify_output_style.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify Style for 'Excel' Table Outputs — modify_output_style","text":"modify_output_style() based Output Delivery System (ODS) 'SAS', provides efficient readable ways set different table styles. output style full control table design. need think calculating right place input background color border certain type loop multiple cells. Just input colors, borders, font styles, etc. different table parts everything else handled functions capable using styles. concept basically : design complex calculations.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/modify_output_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify Style for 'Excel' Table Outputs — modify_output_style","text":"","code":"# For default values excel_style <- excel_output_style()  # Set specific options, the rest will be kept as is excel_style <- excel_style |> modify_output_style(sheet_name      = \"Sheet\",                                                   title_font_bold = FALSE)  # For cells with no background color pass an empty string excel_style <- excel_style |> modify_output_style(table_back_color = \"\")"},{"path":"https://s3rdia.github.io/qol/reference/monitor.html","id":null,"dir":"Reference","previous_headings":"","what":"Monitor Time Consumption — monitor","title":"Monitor Time Consumption — monitor","text":"monitor functions offer simple way keep track timings visualize charts. used throughout longer syntax useful identify bottlenecks just get better feeling passages take time others. monitor_start() starts new timing adds observation monitoring data table. Pass NULL monitor_df call function first time create new monitoring data table. monitor_end() ends current timing calculates corresponding delta. monitor_next() ends current timing calculates corresponding delta. addition directly starts new timing new section. monitor_plot() outputs two charts visualize saved delta times.","code":""},{"path":"https://s3rdia.github.io/qol/reference/monitor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monitor Time Consumption — monitor","text":"","code":"monitor_start(monitor_df, section, group = \"Total\")  monitor_end(monitor_df)  monitor_next(monitor_df, section, group = \"Total\")  monitor_plot(monitor_df, by = \"section\", draw_plot = TRUE)"},{"path":"https://s3rdia.github.io/qol/reference/monitor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monitor Time Consumption — monitor","text":"monitor_df data table delta times respective section names stored. section named section store delta times. group Optionally pass broader group name able plot summarised delta times addition detailed ones. \"Total\" default value. Use \"section\" detailed plot \"group\" summarised categories. draw_plot Conditionally draw plots. TRUE default.","code":""},{"path":"https://s3rdia.github.io/qol/reference/monitor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monitor Time Consumption — monitor","text":"Returns small data table section-, group-names corresponding delta times.","code":""},{"path":"https://s3rdia.github.io/qol/reference/monitor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monitor Time Consumption — monitor","text":"","code":"# Example data frame monitor_df <- NULL |> monitor_start(\"Generate data frame\", \"Preparation\")  my_data <- dummy_data(1000)  # Formats monitor_df <- monitor_df |> monitor_next(\"Create formats\", \"Preparation\")  age. <- discrete_format(     \"Total\"          = 0:100,     \"under 18\"       = 0:17,     \"18 to under 25\" = 18:24,     \"25 to under 55\" = 25:54,     \"55 to under 65\" = 55:65,     \"65 and older\"   = 65:100)  sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  # Evaluations monitor_df <- monitor_df |> monitor_next(\"Nested summarise\", \"Summarise\")  all_nested <- my_data |>     summarise_plus(class      = c(year, sex, age),                    values     = income,                    statistics = c(\"sum\", \"pct_group\", \"pct_total\", \"sum_wgt\", \"freq\"),                    formats    = list(sex = \"sex.\", age = \"age.\"),                    weight     = weight,                    nesting    = \"deepest\",                    na.rm      = TRUE)  monitor_df <- monitor_df |> monitor_next(\"All summarise\", \"Summarise\")  all_possible <- my_data |>     summarise_plus(class      = c(year, sex, age),                    values     = c(probability),                    statistics = c(\"sum\", \"p1\", \"p99\", \"min\", \"max\", \"freq\", \"freq_g0\"),                    formats    = list(sex    = \"sex.\",                                      age    = \"age.\"),                    weight     = weight,                    nesting    = \"all\",                    na.rm      = TRUE)  monitor_df <- monitor_df |> monitor_end()  # For detailed plot monitor_df |> monitor_plot()  # For summarised plot monitor_df |> monitor_plot(by = \"group\")  # NOTE: The more complex functions in this package have a detailed monitoring #       integrated which can be viewed by setting the argument 'monitor' to TRUE."},{"path":"https://s3rdia.github.io/qol/reference/number_format_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Number Formats Used by any_table() — number_format_style","title":"Number Formats Used by any_table() — number_format_style","text":"Set individual number formats different statistics tables produced any_table().","code":""},{"path":"https://s3rdia.github.io/qol/reference/number_format_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number Formats Used by any_table() — number_format_style","text":"","code":"number_format_style(   pct_excel = \"0.0\",   freq_excel = \"#,###,##0\",   freq.g0_excel = \"#,###,##0\",   sum_excel = \"#,###,##0\",   sum.wgt_excel = \"#,###,##0\",   mean_excel = \"#,###,##0\",   median_excel = \"#,###,##0\",   mode_excel = \"#,###,##0\",   min_excel = \"#,###,##0\",   max_excel = \"#,###,##0\",   sd_excel = \"#,###,##0.000\",   variance_excel = \"#,###,##0.000\",   first_excel = \"#,###,##0\",   last_excel = \"#,###,##0\",   p_excel = \"#,###,##0\",   missing_excel = \"#,###,##0\",   pct_decimals = 1,   freq_decimals = 0,   freq.g0_decimals = 0,   sum_decimals = 3,   sum.wgt_decimals = 3,   mean_decimals = 2,   median_decimals = 2,   mode_decimals = 2,   min_decimals = 2,   max_decimals = 2,   sd_decimals = 3,   variance_decimals = 3,   first_decimals = 0,   last_decimals = 0,   p_decimals = 2,   missing_decimals = 0 )"},{"path":"https://s3rdia.github.io/qol/reference/number_format_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number Formats Used by any_table() — number_format_style","text":"pct_excel Number format percentage applied Excel workbook. freq_excel Number format frequency applied Excel workbook. freq.g0_excel Number format frequency greater zero applied Excel workbook. sum_excel Number format sum applied Excel workbook. sum.wgt_excel Number format sum weights applied Excel workbook. mean_excel Number format mean applied Excel workbook. median_excel Number format median applied Excel workbook. mode_excel Number format mode applied Excel workbook. min_excel Number format min applied Excel workbook. max_excel Number format max applied Excel workbook. sd_excel Number format sd applied Excel workbook. variance_excel Number format variance applied Excel workbook. first_excel Number format first applied Excel workbook. last_excel Number format last applied Excel workbook. p_excel Number format percentile applied Excel workbook. missing_excel Number format missing applied Excel workbook. pct_decimals Number decimals percentage. freq_decimals Number decimals frequency. freq.g0_decimals Number decimals frequency greater zero. sum_decimals Number decimals sum. sum.wgt_decimals Number decimals sum weights. mean_decimals Number decimals mean. median_decimals Number decimals median. mode_decimals Number decimals mode. min_decimals Number decimals min. max_decimals Number decimals max. sd_decimals Number decimals sd. variance_decimals Number decimals variance. first_decimals Number decimals first. last_decimals Number decimals last. p_decimals Number decimals percentile. missing_decimals Number decimals missing.","code":""},{"path":"https://s3rdia.github.io/qol/reference/number_format_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number Formats Used by any_table() — number_format_style","text":"Returns list named number format options.","code":""},{"path":"https://s3rdia.github.io/qol/reference/number_format_style.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number Formats Used by any_table() — number_format_style","text":"number_format_style() based 'SAS' number formats Output Delivery System (ODS), provides efficient readable ways set different table styles. number format style full control formatting numbers according different statistics. need think calculating right place input number formats loop multiple cells. Just input different number formats decimals different statistics everything else handled functions capable using number styles. concept basically : design complex calculations.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/number_format_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number Formats Used by any_table() — number_format_style","text":"","code":"# For default values format_list <- number_format_style()  # Set specific options, the rest will be set to default values format_list <- number_format_style(pct_excel    = \"0.00000000\",                                    pct_decimals = 8)  # IMPORTANT: Don't forget to add individual formats to an excel style, otherwise # they won't come into affect. excel_style <- excel_output_style(number_formats = format_list)"},{"path":"https://s3rdia.github.io/qol/reference/qol-package.html","id":null,"dir":"Reference","previous_headings":"","what":"qol - Quality of Life — qol-package","title":"qol - Quality of Life — qol-package","text":"package brings quality life concepts functions inspired 'SAS' 'R'. main goal make descriptive evaluations easier, one can create bigger complex outputs less time less code. Introducing format containers multilabels, powerful summarise, capable output every possible combination provided grouping variables one go, tabulation functions can create table different styles readable functions. addition offers error handling often catches errors just code flow, even small errors. always get understandable message helps get rid problem. package builds incredibly fast data.table collapse packages maximum speed wonderful openxlsx2 package maximum style.","code":""},{"path":"https://s3rdia.github.io/qol/reference/qol-package.html","id":"imports","dir":"Reference","previous_headings":"","what":"Imports","title":"qol - Quality of Life — qol-package","text":"data.table, collapse, openxlsx2","code":""},{"path":"https://s3rdia.github.io/qol/reference/qol-package.html","id":"minimal-r-version","dir":"Reference","previous_headings":"","what":"Minimal R Version","title":"qol - Quality of Life — qol-package","text":"4.1.0 higher","code":""},{"path":"https://s3rdia.github.io/qol/reference/qol-package.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"qol - Quality of Life — qol-package","text":"Creating formats: discrete_format(), interval_format(). Summarisation tabulation: summarise_plus(), frequencies(), crosstabs(), any_table(), export_with_style(). Creating custom table style: excel_output_style(), modify_output_style(), number_format_style(), modify_number_formats(). Recoding: recode(), recode_multi(). Selecting: keep(), dropp(). -statement: .(), else_if.(), else.(). Monitoring: monitor_start(), monitor_end(), monitor_next(), monitor_plot(). Renaming: rename_pattern(), add_extension(), remove_stat_extension(). Generate dummy data: dummy_data() Small helpers: inverse(), setcolorder_by_pattern(), running_number(), drop_type_vars(), fuse_variables(), get_excel_range(). Split data frame: split_by_var(), split_by_condition(). : build_master(), args_to_char(), convert_numeric(), is_numeric()","code":""},{"path":"https://s3rdia.github.io/qol/reference/qol-package.html","id":"snippets","dir":"Reference","previous_headings":"","what":"Snippets","title":"qol - Quality of Life — qol-package","text":"","code":"snippet splus     summarise_plus(class      = c(var1, var2, ...),                    values     = c(var1, var2, ...),                    statistics = c(\"pct_group\", \"sum\", \"sum_wgt\", \"freq\"),                    formats    = list(var = format., ...),                    weight     = weight_var,                    nesting    = \"deepest\")  snippet if.          if.(condition, var, value) |>     else_if.(condition, var, value) |>     else.   (           var, value)  snippet freq     frequencies(variables = c(var1, var2, ...),                 formats   = list(var = \"format.\", ...),                 titles    = c(),                 footnotes = c(),                 weight    = weight_var)  snippet cross     crosstabs(rows       = row_var,               columns    = col_var,               statistics = c(\"sum\", \"pct_row\", \"pct_column\", \"pct_total\", \"freq\"),               formats   = list(var = format., ...),               titles    = c(),               footnotes = c(),               weight    = weight_var)  snippet any     any_table(rows        = c(\"var1 + var2 + ...\", \"var1\"),               columns     = c(\"var3\", \"var3 + var4 + ...\"),               values.     = c(\"value_var1\", \"value_var2\")               statistics  = c(\"sum\", \"pct_group\", \"pct_value\", \"freq\"),               pct_group   = c(\"var1\", \"var2\"),               pct_value   = list(new_var = \"numerator / denominator\"),               formats     = list(var = format., ...),               titles      = c(),               footnotes   = c(),               var_labels  = list(\"var1\" = \"My label\", ...),               stat_labels = list(\"pct\" = \"               box         = \"\"               weight      = weight_var)"},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/qol-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"qol - Quality of Life — qol-package","text":"Tim Siebenmorgen","code":""},{"path":"https://s3rdia.github.io/qol/reference/recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode New Variables With Formats — recode","title":"Recode New Variables With Formats — recode","text":"Instead writing multiple -clauses recode values new variable, can use formats recode variable new one.","code":""},{"path":"https://s3rdia.github.io/qol/reference/recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode New Variables With Formats — recode","text":"","code":"recode(data_frame, new_var, ...)  recode_multi(data_frame, ...)"},{"path":"https://s3rdia.github.io/qol/reference/recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode New Variables With Formats — recode","text":"data_frame data frame contains original variables recode. new_var name newly created recoded variable. ... recode() Pass original variable name recoded along corresponding format container form: variable = format. recode_multi() multiple variables can recoded one go multilabels can applied. overwrites original variables duplicates rows multilabels applied. occasions want use format containers afterwards perform operations packages, can make use principle function.","code":""},{"path":"https://s3rdia.github.io/qol/reference/recode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode New Variables With Formats — recode","text":"Returns data frame newly recoded variable.","code":""},{"path":"https://s3rdia.github.io/qol/reference/recode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode New Variables With Formats — recode","text":"recode() based 'SAS' function put(), provides efficient readable way, generate new variables help formats. creating format can basically write code like think: new category consists original values. just apply new categories original values create new variable. need multiple if_else statements.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode New Variables With Formats — recode","text":"","code":"# Example formats age. <- discrete_format(     \"under 18\"       = 0:17,     \"18 to under 25\" = 18:24,     \"25 to under 55\" = 25:54,     \"55 to under 65\" = 55:64,     \"65 and older\"   = 65:100)  # Example data frame my_data <- dummy_data(1000)  # Call function my_data <- my_data |> recode(\"age_group1\", age = age.)  # Formats can also be passed as characters my_data <- my_data |> recode(\"age_group2\", age = \"age.\")  # Multilabel recode sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  income. <- interval_format(     \"Total\"              = 0:99999,     \"below 500\"          = 0:499,     \"500 to under 1000\"  = 500:999,     \"1000 to under 2000\" = 1000:1999,     \"2000 and more\"      = 2000:99999)  multi_data <- my_data |> recode_multi(sex = sex., income = income.)"},{"path":"https://s3rdia.github.io/qol/reference/remove_stat_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Statistic From Variable Names — remove_stat_extension","title":"Replace Statistic From Variable Names — remove_stat_extension","text":"Remove statistic name variable names, get back old names without extension.","code":""},{"path":"https://s3rdia.github.io/qol/reference/remove_stat_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Statistic From Variable Names — remove_stat_extension","text":"","code":"remove_stat_extension(data_frame, statistics)"},{"path":"https://s3rdia.github.io/qol/reference/remove_stat_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Statistic From Variable Names — remove_stat_extension","text":"data_frame data frame variables renamed. statistics Statistic extensions removed variable names.","code":""},{"path":"https://s3rdia.github.io/qol/reference/remove_stat_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Statistic From Variable Names — remove_stat_extension","text":"Returns data frame renamed variables.","code":""},{"path":"https://s3rdia.github.io/qol/reference/remove_stat_extension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Statistic From Variable Names — remove_stat_extension","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Summarise data all_nested <- my_data |>     summarise_plus(class      = c(year, sex),                    values     = c(weight, income),                    statistics = c(\"sum\", \"pct_group\", \"pct_total\", \"sum_wgt\", \"freq\"),                    weight     = weight,                    nesting    = \"deepest\",                    na.rm      = TRUE)  # Remove statistic extension new_names <- all_nested |> remove_stat_extension(\"sum\")"},{"path":"https://s3rdia.github.io/qol/reference/rename_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Patterns Inside Variable Names — rename_pattern","title":"Replace Patterns Inside Variable Names — rename_pattern","text":"Replace certain pattern inside variable name new one. can used multiple different variable names pattern common (e.g. end \"_sum\" start different), multiple rename variable calls.","code":""},{"path":"https://s3rdia.github.io/qol/reference/rename_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Patterns Inside Variable Names — rename_pattern","text":"","code":"rename_pattern(data_frame, old_pattern, new_pattern)"},{"path":"https://s3rdia.github.io/qol/reference/rename_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Patterns Inside Variable Names — rename_pattern","text":"data_frame data frame variables renamed. old_pattern pattern replaced variable names. new_pattern pattern set place old one.","code":""},{"path":"https://s3rdia.github.io/qol/reference/rename_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Patterns Inside Variable Names — rename_pattern","text":"Returns data frame renamed variables.","code":""},{"path":"https://s3rdia.github.io/qol/reference/rename_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Patterns Inside Variable Names — rename_pattern","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Summarise data all_nested <- my_data |>     summarise_plus(class      = c(year, sex),                    values     = c(weight, income),                    statistics = c(\"sum\", \"pct_group\", \"pct_total\", \"sum_wgt\", \"freq\"),                    weight     = weight,                    nesting    = \"deepest\",                    na.rm      = TRUE)  # Rename variables by repacing patterns new_names <- all_nested |>     rename_pattern(\"pct\", \"percent\") |>     rename_pattern(\"_sum\", \"\")"},{"path":"https://s3rdia.github.io/qol/reference/running_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Running Numbers — running_number","title":"Compute Running Numbers — running_number","text":"Compute running numbers data frame. Without specifying variable results row number. variable computes running number within group expressions.","code":""},{"path":"https://s3rdia.github.io/qol/reference/running_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Running Numbers — running_number","text":"","code":"running_number(data_frame, var_name = \"run_nr\", by = NULL)"},{"path":"https://s3rdia.github.io/qol/reference/running_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Running Numbers — running_number","text":"data_frame data frame compute running number. var_name variable name running number. group compute running number per expression.","code":""},{"path":"https://s3rdia.github.io/qol/reference/running_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Running Numbers — running_number","text":"Returns data frame new variable containing running number.","code":""},{"path":"https://s3rdia.github.io/qol/reference/running_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Running Numbers — running_number","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Get row numbers my_data <- my_data |> running_number() my_data <- my_data |> running_number(\"row_number\")  # Running number per variable expression my_data <- my_data |> running_number(by = year)"},{"path":"https://s3rdia.github.io/qol/reference/setcolorder_by_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Order Columns by Variable Name Patterns — setcolorder_by_pattern","title":"Order Columns by Variable Name Patterns — setcolorder_by_pattern","text":"Order variables data frame based pattern rather whole variable names. E.g. grab every variable contains \"sum\" name order together appear next .","code":""},{"path":"https://s3rdia.github.io/qol/reference/setcolorder_by_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order Columns by Variable Name Patterns — setcolorder_by_pattern","text":"","code":"setcolorder_by_pattern(data_frame, pattern)"},{"path":"https://s3rdia.github.io/qol/reference/setcolorder_by_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order Columns by Variable Name Patterns — setcolorder_by_pattern","text":"data_frame data frame ordered. pattern pattern used ordering data frame columns.","code":""},{"path":"https://s3rdia.github.io/qol/reference/setcolorder_by_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order Columns by Variable Name Patterns — setcolorder_by_pattern","text":"Returns reordered data frame ordered variables end.","code":""},{"path":"https://s3rdia.github.io/qol/reference/setcolorder_by_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order Columns by Variable Name Patterns — setcolorder_by_pattern","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Summarise data all_nested <- my_data |>     summarise_plus(class      = c(year, sex),                    values     = c(weight, income),                    statistics = c(\"sum\", \"pct_group\", \"pct_total\", \"sum_wgt\", \"freq\"),                    weight     = weight,                    nesting    = \"deepest\",                    na.rm      = TRUE)  # Set a different column order new_order <- all_nested |> setcolorder_by_pattern(c(\"pct\", \"freq\", \"sum\"))"},{"path":"https://s3rdia.github.io/qol/reference/split_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Data Frame by Variable Expressions or Condition — split_by","title":"Split Data Frame by Variable Expressions or Condition — split_by","text":"Split data frame based variable expressions conditions receive multiple smaller data frames.","code":""},{"path":"https://s3rdia.github.io/qol/reference/split_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Data Frame by Variable Expressions or Condition — split_by","text":"","code":"split_by_var(data_frame, variable)  split_by_condition(data_frame, ..., inverse = FALSE)"},{"path":"https://s3rdia.github.io/qol/reference/split_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Data Frame by Variable Expressions or Condition — split_by","text":"data_frame data frame split multiple data frames. variable split_by_var() pass variable name expressions used splitting data frame. ... split_by_condition() pass one multiple conditions provided data frame splitted. inverse split_by_condition() one condition provided, data frame can split two parts. second returned data frame inverse group first.","code":""},{"path":"https://s3rdia.github.io/qol/reference/split_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Data Frame by Variable Expressions or Condition — split_by","text":"split_by_var(): Returns list data frames split variable expressions. lists names variable expressions. split_by_condition(): Returns list data frames split conditionally. lists names conditions.","code":""},{"path":"https://s3rdia.github.io/qol/reference/split_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split Data Frame by Variable Expressions or Condition — split_by","text":"split_by() based explicit Output 'SAS'. Output function one can - among things - explicitly tell 'SAS' observation output data set. enables user output one observation one multiple data sets. Instead subsetting data frame multiple times manually, can subset multiple times function.","code":""},{"path":"https://s3rdia.github.io/qol/reference/split_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Data Frame by Variable Expressions or Condition — split_by","text":"","code":"# Example data frame my_data <- dummy_data(1000)  # Split by variable expressions split_var_df <- my_data |> split_by_var(sex)  # Split by conditions split_cond_df <- my_data |> split_by_condition(sex == 1 & age <  18,                                                sex == 2 & age >= 18)  # Split by condition with inverse group split_inv_df <- my_data |> split_by_condition(sex == 1, inverse = TRUE)"},{"path":"https://s3rdia.github.io/qol/reference/summarise_plus.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast and Powerful yet Simple to Use Summarise — summarise_plus","title":"Fast and Powerful yet Simple to Use Summarise — summarise_plus","text":"summarise_plus() creates new aggregated data table desired grouping. can output deepest nested combination grouping variables (default) can also output every possible combination grouping variables , just one small change. Besides normal summary functions like sum, mean median, can also calculate respective weighted version just setting weight variable.","code":""},{"path":"https://s3rdia.github.io/qol/reference/summarise_plus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast and Powerful yet Simple to Use Summarise — summarise_plus","text":"","code":"summarise_plus(   data_frame,   class = NULL,   values,   statistics = c(\"sum\", \"freq\"),   formats = c(),   types = c(),   weight = NULL,   nesting = \"deepest\",   merge_back = FALSE,   na.rm = FALSE,   monitor = FALSE,   notes = TRUE )"},{"path":"https://s3rdia.github.io/qol/reference/summarise_plus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast and Powerful yet Simple to Use Summarise — summarise_plus","text":"data_frame data frame summarise. class vector containing grouping variables. values vector containing variables summarised. statistics Available functions: \"sum\"       -> Weighted unweighted sum \"sum_wgt\"   -> Sum weights \"freq\"      -> Unweighted frequency \"freq_g0\"   -> Unweighted frequency values greater zero \"pct_group\" -> Weighted unweighted percentages within respective group \"pct_total\" -> Weighted unweighted percentages compared grand total \"mean\"      -> Weighted unweighted mean \"median\"    -> Weighted unweighted median \"mode\"      -> Weighted unweighted mode \"min\"       -> Minimum \"max\"       -> Maximum \"sd\"        -> Weighted unweighted standard deviation \"variance\"  -> Weighted unweighted standard variance \"first\"     -> First value \"last\"      -> Last value \"pn\"        -> Weighted unweighted percentiles (p1, p2, p3, ... possible) \"missing\"   -> Missings generated value variables formats list specified formats applied class variables. types character vector specifying different combinations group variables computed using nesting = \"\". left empty possible combinations computed. weight Put weight variable compute weighted results. nesting predefined value \"deepest\" meaning fully nested version class variables computed. set \"\", possible combinations computed one data table. option \"single\" outputs ungrouped summary class variables one data table. merge_back Newly summarised variables can merged back original data frame TRUE. works nested = \"deepest formats defined. na.rm FALSE default. TRUE removes NA values class variables. monitor FALSE default. TRUE outputs two charts visualize functions time consumption. notes TRUE default. Prints notifications NA values produced class variables summarise.","code":""},{"path":"https://s3rdia.github.io/qol/reference/summarise_plus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast and Powerful yet Simple to Use Summarise — summarise_plus","text":"Returns summarised data table.","code":""},{"path":"https://s3rdia.github.io/qol/reference/summarise_plus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast and Powerful yet Simple to Use Summarise — summarise_plus","text":"summarise_plus() based 'SAS' procedure Proc Summary, provides efficient readable ways perform complex aggregations. Normally compute new categorical variables beforehand - probably even different forms, wanted different categorizations - bloat data set. recoding footwork finally use multiple summaries compute stats need put back together. function necessary. summarise_plus() put original data frame let recoding happen via format containers. efficient, since new variables categories created just summarise happens. Additionally can specify whether want produce nested version group variables whether want produce every possible combination one go. single option. function optimized always take fastest route, depending options specified.","code":""},{"path":[]},{"path":"https://s3rdia.github.io/qol/reference/summarise_plus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast and Powerful yet Simple to Use Summarise — summarise_plus","text":"","code":"# Example formats age. <- discrete_format(     \"Total\"          = 0:100,     \"under 18\"       = 0:17,     \"18 to under 25\" = 18:24,     \"25 to under 55\" = 25:54,     \"55 to under 65\" = 55:64,     \"65 and older\"   = 65:100)  sex. <- discrete_format(     \"Total\"  = 1:2,     \"Male\"   = 1,     \"Female\" = 2)  income. <- interval_format(     \"Total\"              = 0:99999,     \"below 500\"          = 0:499,     \"500 to under 1000\"  = 500:999,     \"1000 to under 2000\" = 1000:1999,     \"2000 and more\"      = 2000:99999)  # Example data frame my_data <- dummy_data(1000)  # Call function all_nested <- my_data |>     summarise_plus(class      = c(year, sex, age),                    values     = income,                    statistics = c(\"sum\", \"pct_group\", \"pct_total\", \"sum_wgt\", \"freq\"),                    formats    = list(sex = sex., age = age.),                    weight     = weight,                    nesting    = \"deepest\",                    na.rm      = TRUE)  all_possible <- my_data |>     summarise_plus(class      = c(year, sex, age, income),                    values     = c(probability),                    statistics = c(\"sum\", \"p1\", \"p99\", \"min\", \"max\", \"freq\", \"freq_g0\"),                    formats    = list(sex    = sex.,                                      age    = age.,                                      income = income.),                    weight     = weight,                    nesting    = \"all\",                    na.rm      = TRUE)  # Formats can also be passed as characters single <- my_data |>     summarise_plus(class      = c(year, age, sex),                    values     = weight,                    statistics = c(\"sum\", \"mean\"),                    formats    = list(sex = \"sex.\", age = \"age.\"),                    nesting    = \"single\")  merge_back <- my_data |>     summarise_plus(class      = c(year, age, sex),                    values     = weight,                    statistics = c(\"sum\", \"mean\"),                    nesting    = \"deepest\",                    merge_back = TRUE)  certain_types <- my_data |>     summarise_plus(class      = c(year, sex, age),                    values     = c(probability),                    statistics = c(\"sum\", \"mean\", \"freq\"),                    formats    = list(sex = sex.,                                      age = age.),                    types      = c(\"year\", \"year + age\", \"age + sex\"),                    weight     = weight,                    nesting    = \"all\",                    na.rm      = TRUE)"},{"path":[]},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"new-functions-1-0-3","dir":"Changelog","previous_headings":"","what":"New functions","title":"qol 1.0.3 - DEVELOPMENT","text":"build_master(): Reads given folder structure, contains scripts, builds master script markdown file. (18.10.2025)","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"fixed-1-0-3","dir":"Changelog","previous_headings":"","what":"Fixed","title":"qol 1.0.3 - DEVELOPMENT","text":"any_table() header table row heights well column widths set style option 1 row/column short. (14.10.2025) any_table() row heights didn’t catch whole table. (14.10.2025) any_table() ran error, variable provided pct_group, part row column variables. (14.10.2025) Fixed typos frequencies examples, said “frequency” instead “frequencies”. (18.10.2025) Excel outputs number stored text error now ignored. (19.10.2025, thanks @JanMarvin) Fixed table length captured many rows. (19.10.2025)","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"changed-functionality-1-0-3","dir":"Changelog","previous_headings":"","what":"Changed functionality","title":"qol 1.0.3 - DEVELOPMENT","text":"excel_output_style() options column_widths row_heights now start first column/row instead beginning table. (19.10.2025)","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"additionally-1-0-3","dir":"Changelog","previous_headings":"","what":"Additionally","title":"qol 1.0.3 - DEVELOPMENT","text":"Added missing functions export_with_style() get_excel_range() ?qol overview page. (14.10.2025) Added information startup message use ?qol get overview. (14.10.2025) Now using openxlsx2 helper convert row column numbers Excel ranges. (19.10.2025, thanks @JanMarvin) Excel tables now named ranges table values. (19.10.2025, thanks @JanMarvin) Added example README showing save Excel workbook filesystem. (19.10.2025) Used lintr package code cleanup. (20.10.2025, thanks @JanMarvin advise)","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"github-related-1-0-3","dir":"Changelog","previous_headings":"","what":"GitHub related","title":"qol 1.0.3 - DEVELOPMENT","text":"Added article comparing package SAS. (14.10.2025) Changed GitHub Page style. (14.10.2025)","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"qol-102","dir":"Changelog","previous_headings":"","what":"qol 1.0.2","title":"qol 1.0.2","text":"CRAN release: 2025-10-14","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"description-file-1-0-2","dir":"Changelog","previous_headings":"","what":"DESCRIPTION file","title":"qol 1.0.2","text":"Fixed brackets DESCRIPTION auto linking works. Added another URL.","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"fixed-1-0-2","dir":"Changelog","previous_headings":"","what":"Fixed","title":"qol 1.0.2","text":"error summarise_plus(), any_table() args_to_char(), many variables provided. summarise_plus() ran error, value label format contained “.”. any_table() lead wrong results pre_summed option used variable part multiple combinations summarised data.","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"changed-functionality-1-0-2","dir":"Changelog","previous_headings":"","what":"Changed functionality","title":"qol 1.0.2","text":"summarise_plus(), types defined, total row now removed explicitly defined type. summarise_plus(), nesting option “deepest” used, variables TYPE, TYPE_NR DEPTHS now also generated.","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"unit-tests-1-0-2","dir":"Changelog","previous_headings":"","what":"Unit tests","title":"qol 1.0.2","text":"Adjusted tests according changed functionalities","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"additionally-1-0-2","dir":"Changelog","previous_headings":"","what":"Additionally","title":"qol 1.0.2","text":"Added openxlsx2 import qol main help file Corrected typo warning message any_table() concerning variable order.","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"qol-101","dir":"Changelog","previous_headings":"","what":"qol 1.0.1","title":"qol 1.0.1","text":"CRAN release: 2025-10-10 Added references specific SAS functions description field Description file mentioned. Removed specific seed R/dummy_data.R Fixed bug dummy_data happen enough observations generated.","code":""},{"path":"https://s3rdia.github.io/qol/news/index.html","id":"qol-100","dir":"Changelog","previous_headings":"","what":"qol 1.0.0","title":"qol 1.0.0","text":"Initial CRAN submission.","code":""}]
